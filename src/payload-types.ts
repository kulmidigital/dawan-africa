/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji'

export interface Config {
  auth: {
    users: UserAuthOperations
  }
  blocks: {}
  collections: {
    users: User
    media: Media
    blogPosts: BlogPost
    blogCategories: BlogCategory
    staging: Staging
    'payload-locked-documents': PayloadLockedDocument
    'payload-preferences': PayloadPreference
    'payload-migrations': PayloadMigration
  }
  collectionsJoins: {}
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>
    media: MediaSelect<false> | MediaSelect<true>
    blogPosts: BlogPostsSelect<false> | BlogPostsSelect<true>
    blogCategories: BlogCategoriesSelect<false> | BlogCategoriesSelect<true>
    staging: StagingSelect<false> | StagingSelect<true>
    'payload-locked-documents':
      | PayloadLockedDocumentsSelect<false>
      | PayloadLockedDocumentsSelect<true>
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>
  }
  db: {
    defaultIDType: string
  }
  globals: {}
  globalsSelect: {}
  locale: null
  user: User & {
    collection: 'users'
  }
  jobs: {
    tasks: unknown
    workflows: unknown
  }
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string
    password: string
  }
  login: {
    email: string
    password: string
  }
  registerFirstUser: {
    email: string
    password: string
  }
  unlock: {
    email: string
    password: string
  }
}
/**
 * Manage user accounts and roles for the blog platform. Assign content creator roles to enable post submission workflow.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string
  name?: string | null
  /**
   * Upload a profile picture for the user.
   */
  profilePicture?: (string | null) | Media
  /**
   * Select the roles for this user. Content creators can write posts, admins can approve them.
   */
  roles?: ('admin' | 'analyst' | 'columnist' | 'reporter' | 'contributor' | 'user')[] | null
  /**
   * User subscription level for premium content access.
   */
  subscriptionTier?: ('free' | 'premium') | null
  /**
   * Automatically updated when user verifies their email.
   */
  isEmailVerified?: boolean | null
  /**
   * Blog posts marked as favorites by this user.
   */
  favoritedPosts?: (string | BlogPost)[] | null
  /**
   * Blog posts liked by this user.
   */
  likedPosts?: (string | BlogPost)[] | null
  updatedAt: string
  createdAt: string
  email: string
  resetPasswordToken?: string | null
  resetPasswordExpiration?: string | null
  salt?: string | null
  hash?: string | null
  loginAttempts?: number | null
  lockUntil?: string | null
  password?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string
  alt?: string | null
  _key?: string | null
  updatedAt: string
  createdAt: string
  url?: string | null
  thumbnailURL?: string | null
  filename?: string | null
  mimeType?: string | null
  filesize?: number | null
  width?: number | null
  height?: number | null
  focalX?: number | null
  focalY?: number | null
}
/**
 * Manage blog posts and content.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogPosts".
 */
export interface BlogPost {
  id: string
  name: string
  /**
   * This is automatically generated from the title.
   */
  slug: string
  /**
   * Current status of your post. Contact an admin to change this.
   */
  statusDisplay?: string | null
  /**
   * Change the publication status of this post.
   */
  status?: ('pending' | 'published') | null
  layout?:
    | (
        | {
            content?: {
              root: {
                type: string
                children: {
                  type: string
                  version: number
                  [k: string]: unknown
                }[]
                direction: ('ltr' | 'rtl') | null
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | ''
                indent: number
                version: number
              }
              [k: string]: unknown
            } | null
            id?: string | null
            blockName?: string | null
            blockType: 'richtext'
          }
        | {
            heading: {
              root: {
                type: string
                children: {
                  type: string
                  version: number
                  [k: string]: unknown
                }[]
                direction: ('ltr' | 'rtl') | null
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | ''
                indent: number
                version: number
              }
              [k: string]: unknown
            }
            subheading: string
            image?: (string | null) | Media
            id?: string | null
            blockName?: string | null
            blockType: 'cover'
          }
        | {
            image?: (string | null) | Media
            id?: string | null
            blockName?: string | null
            blockType: 'image'
          }
      )[]
    | null
  categories?: (string | BlogCategory)[] | null
  /**
   * Select an author from content creators and admins. Regular users are excluded.
   */
  author: string | User
  likes?: number | null
  favoritesCount?: number | null
  views?: number | null
  isEditorsPick?: boolean | null
  /**
   * URL of the generated audio file for this post.
   */
  audioUrl?: string | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogCategories".
 */
export interface BlogCategory {
  id: string
  name: string
  slug: string
  updatedAt: string
  createdAt: string
}
/**
 * Review and approve blog posts submitted by content creators. Simple workflow for content approval.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "staging".
 */
export interface Staging {
  id: string
  /**
   * The blog post being reviewed. Only pending posts are available for selection.
   */
  blogPost: string | BlogPost
  /**
   * Current status of the review process. Change to Published to approve the post.
   */
  status: 'pending' | 'published'
  /**
   * When the post was submitted for review.
   */
  submittedAt?: string | null
  /**
   * The content creator who submitted this post for review.
   */
  submittedBy?: (string | null) | User
  /**
   * The admin who reviewed this post.
   */
  reviewedBy?: (string | null) | User
  /**
   * When the review was completed.
   */
  reviewedAt?: string | null
  /**
   * Automatic log of status changes and actions.
   */
  workflowHistory?:
    | {
        action: string
        performedBy: string | User
        performedAt: string
        fromStatus?: string | null
        toStatus?: string | null
        id?: string | null
      }[]
    | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string
  document?:
    | ({
        relationTo: 'users'
        value: string | User
      } | null)
    | ({
        relationTo: 'media'
        value: string | Media
      } | null)
    | ({
        relationTo: 'blogPosts'
        value: string | BlogPost
      } | null)
    | ({
        relationTo: 'blogCategories'
        value: string | BlogCategory
      } | null)
    | ({
        relationTo: 'staging'
        value: string | Staging
      } | null)
  globalSlug?: string | null
  user: {
    relationTo: 'users'
    value: string | User
  }
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string
  user: {
    relationTo: 'users'
    value: string | User
  }
  key?: string | null
  value?:
    | {
        [k: string]: unknown
      }
    | unknown[]
    | string
    | number
    | boolean
    | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string
  name?: string | null
  batch?: number | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T
  profilePicture?: T
  roles?: T
  subscriptionTier?: T
  isEmailVerified?: T
  favoritedPosts?: T
  likedPosts?: T
  updatedAt?: T
  createdAt?: T
  email?: T
  resetPasswordToken?: T
  resetPasswordExpiration?: T
  salt?: T
  hash?: T
  loginAttempts?: T
  lockUntil?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T
  _key?: T
  updatedAt?: T
  createdAt?: T
  url?: T
  thumbnailURL?: T
  filename?: T
  mimeType?: T
  filesize?: T
  width?: T
  height?: T
  focalX?: T
  focalY?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogPosts_select".
 */
export interface BlogPostsSelect<T extends boolean = true> {
  name?: T
  slug?: T
  statusDisplay?: T
  status?: T
  layout?:
    | T
    | {
        richtext?:
          | T
          | {
              content?: T
              id?: T
              blockName?: T
            }
        cover?:
          | T
          | {
              heading?: T
              subheading?: T
              image?: T
              id?: T
              blockName?: T
            }
        image?:
          | T
          | {
              image?: T
              id?: T
              blockName?: T
            }
      }
  categories?: T
  author?: T
  likes?: T
  favoritesCount?: T
  views?: T
  isEditorsPick?: T
  audioUrl?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogCategories_select".
 */
export interface BlogCategoriesSelect<T extends boolean = true> {
  name?: T
  slug?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "staging_select".
 */
export interface StagingSelect<T extends boolean = true> {
  blogPost?: T
  status?: T
  submittedAt?: T
  submittedBy?: T
  reviewedBy?: T
  reviewedAt?: T
  workflowHistory?:
    | T
    | {
        action?: T
        performedBy?: T
        performedAt?: T
        fromStatus?: T
        toStatus?: T
        id?: T
      }
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T
  globalSlug?: T
  user?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T
  key?: T
  value?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T
  batch?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown
}

declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}
